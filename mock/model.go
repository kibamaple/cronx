// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kibamaple/cronx/model (interfaces: IEventModel,IRelationModel,IResultModel)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/kibamaple/cronx/common"
	model "github.com/kibamaple/cronx/model"
	reflect "reflect"
)

// MockIEventModel is a mock of IEventModel interface
type MockIEventModel struct {
	ctrl     *gomock.Controller
	recorder *MockIEventModelMockRecorder
}

// MockIEventModelMockRecorder is the mock recorder for MockIEventModel
type MockIEventModelMockRecorder struct {
	mock *MockIEventModel
}

// NewMockIEventModel creates a new mock instance
func NewMockIEventModel(ctrl *gomock.Controller) *MockIEventModel {
	mock := &MockIEventModel{ctrl: ctrl}
	mock.recorder = &MockIEventModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventModel) EXPECT() *MockIEventModelMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockIEventModel) Watch(arg0 <-chan struct{}) (<-chan *model.CEvent, <-chan error) {
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(<-chan *model.CEvent)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockIEventModelMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockIEventModel)(nil).Watch), arg0)
}

// MockIRelationModel is a mock of IRelationModel interface
type MockIRelationModel struct {
	ctrl     *gomock.Controller
	recorder *MockIRelationModelMockRecorder
}

// MockIRelationModelMockRecorder is the mock recorder for MockIRelationModel
type MockIRelationModelMockRecorder struct {
	mock *MockIRelationModel
}

// NewMockIRelationModel creates a new mock instance
func NewMockIRelationModel(ctrl *gomock.Controller) *MockIRelationModel {
	mock := &MockIRelationModel{ctrl: ctrl}
	mock.recorder = &MockIRelationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRelationModel) EXPECT() *MockIRelationModelMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockIRelationModel) GetAll(arg0 string, arg1 uint) ([]*common.CRelation, error) {
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]*common.CRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockIRelationModelMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRelationModel)(nil).GetAll), arg0, arg1)
}

// MockIResultModel is a mock of IResultModel interface
type MockIResultModel struct {
	ctrl     *gomock.Controller
	recorder *MockIResultModelMockRecorder
}

// MockIResultModelMockRecorder is the mock recorder for MockIResultModel
type MockIResultModelMockRecorder struct {
	mock *MockIResultModel
}

// NewMockIResultModel creates a new mock instance
func NewMockIResultModel(ctrl *gomock.Controller) *MockIResultModel {
	mock := &MockIResultModel{ctrl: ctrl}
	mock.recorder = &MockIResultModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIResultModel) EXPECT() *MockIResultModelMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockIResultModel) GetStatus(arg0 string, arg1 int64) (byte, error) {
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockIResultModelMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIResultModel)(nil).GetStatus), arg0, arg1)
}

// Save mocks base method
func (m *MockIResultModel) Save(arg0 *common.CResult) error {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIResultModelMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIResultModel)(nil).Save), arg0)
}
