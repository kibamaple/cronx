// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kibamaple/cronx/common (interfaces: IErrorListener,IErrorProvider,IHandle,IService,IResultListener,IResultProvider,ITaskListener,ITaskProvider)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/kibamaple/cronx/common"
	reflect "reflect"
)

// MockIErrorListener is a mock of IErrorListener interface
type MockIErrorListener struct {
	ctrl     *gomock.Controller
	recorder *MockIErrorListenerMockRecorder
}

// MockIErrorListenerMockRecorder is the mock recorder for MockIErrorListener
type MockIErrorListenerMockRecorder struct {
	mock *MockIErrorListener
}

// NewMockIErrorListener creates a new mock instance
func NewMockIErrorListener(ctrl *gomock.Controller) *MockIErrorListener {
	mock := &MockIErrorListener{ctrl: ctrl}
	mock.recorder = &MockIErrorListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIErrorListener) EXPECT() *MockIErrorListenerMockRecorder {
	return m.recorder
}

// OnError mocks base method
func (m *MockIErrorListener) OnError(arg0 error) {
	m.ctrl.Call(m, "OnError", arg0)
}

// OnError indicates an expected call of OnError
func (mr *MockIErrorListenerMockRecorder) OnError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockIErrorListener)(nil).OnError), arg0)
}

// MockIErrorProvider is a mock of IErrorProvider interface
type MockIErrorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIErrorProviderMockRecorder
}

// MockIErrorProviderMockRecorder is the mock recorder for MockIErrorProvider
type MockIErrorProviderMockRecorder struct {
	mock *MockIErrorProvider
}

// NewMockIErrorProvider creates a new mock instance
func NewMockIErrorProvider(ctrl *gomock.Controller) *MockIErrorProvider {
	mock := &MockIErrorProvider{ctrl: ctrl}
	mock.recorder = &MockIErrorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIErrorProvider) EXPECT() *MockIErrorProviderMockRecorder {
	return m.recorder
}

// AddErrorListener mocks base method
func (m *MockIErrorProvider) AddErrorListener(arg0 common.IErrorListener) {
	m.ctrl.Call(m, "AddErrorListener", arg0)
}

// AddErrorListener indicates an expected call of AddErrorListener
func (mr *MockIErrorProviderMockRecorder) AddErrorListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddErrorListener", reflect.TypeOf((*MockIErrorProvider)(nil).AddErrorListener), arg0)
}

// MockIHandle is a mock of IHandle interface
type MockIHandle struct {
	ctrl     *gomock.Controller
	recorder *MockIHandleMockRecorder
}

// MockIHandleMockRecorder is the mock recorder for MockIHandle
type MockIHandleMockRecorder struct {
	mock *MockIHandle
}

// NewMockIHandle creates a new mock instance
func NewMockIHandle(ctrl *gomock.Controller) *MockIHandle {
	mock := &MockIHandle{ctrl: ctrl}
	mock.recorder = &MockIHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIHandle) EXPECT() *MockIHandleMockRecorder {
	return m.recorder
}

// GetConcurrent mocks base method
func (m *MockIHandle) GetConcurrent() int {
	ret := m.ctrl.Call(m, "GetConcurrent")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetConcurrent indicates an expected call of GetConcurrent
func (mr *MockIHandleMockRecorder) GetConcurrent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrent", reflect.TypeOf((*MockIHandle)(nil).GetConcurrent))
}

// Process mocks base method
func (m *MockIHandle) Process(arg0 <-chan struct{}) {
	m.ctrl.Call(m, "Process", arg0)
}

// Process indicates an expected call of Process
func (mr *MockIHandleMockRecorder) Process(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockIHandle)(nil).Process), arg0)
}

// MockIService is a mock of IService interface
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockIService) Init() {
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockIServiceMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIService)(nil).Init))
}

// Start mocks base method
func (m *MockIService) Start() {
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockIServiceMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIService)(nil).Start))
}

// Stop mocks base method
func (m *MockIService) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockIServiceMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIService)(nil).Stop))
}

// MockIResultListener is a mock of IResultListener interface
type MockIResultListener struct {
	ctrl     *gomock.Controller
	recorder *MockIResultListenerMockRecorder
}

// MockIResultListenerMockRecorder is the mock recorder for MockIResultListener
type MockIResultListenerMockRecorder struct {
	mock *MockIResultListener
}

// NewMockIResultListener creates a new mock instance
func NewMockIResultListener(ctrl *gomock.Controller) *MockIResultListener {
	mock := &MockIResultListener{ctrl: ctrl}
	mock.recorder = &MockIResultListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIResultListener) EXPECT() *MockIResultListenerMockRecorder {
	return m.recorder
}

// OnResult mocks base method
func (m *MockIResultListener) OnResult(arg0 *common.CResult) {
	m.ctrl.Call(m, "OnResult", arg0)
}

// OnResult indicates an expected call of OnResult
func (mr *MockIResultListenerMockRecorder) OnResult(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnResult", reflect.TypeOf((*MockIResultListener)(nil).OnResult), arg0)
}

// MockIResultProvider is a mock of IResultProvider interface
type MockIResultProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIResultProviderMockRecorder
}

// MockIResultProviderMockRecorder is the mock recorder for MockIResultProvider
type MockIResultProviderMockRecorder struct {
	mock *MockIResultProvider
}

// NewMockIResultProvider creates a new mock instance
func NewMockIResultProvider(ctrl *gomock.Controller) *MockIResultProvider {
	mock := &MockIResultProvider{ctrl: ctrl}
	mock.recorder = &MockIResultProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIResultProvider) EXPECT() *MockIResultProviderMockRecorder {
	return m.recorder
}

// AddResultListener mocks base method
func (m *MockIResultProvider) AddResultListener(arg0 common.IResultListener) {
	m.ctrl.Call(m, "AddResultListener", arg0)
}

// AddResultListener indicates an expected call of AddResultListener
func (mr *MockIResultProviderMockRecorder) AddResultListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResultListener", reflect.TypeOf((*MockIResultProvider)(nil).AddResultListener), arg0)
}

// MockITaskListener is a mock of ITaskListener interface
type MockITaskListener struct {
	ctrl     *gomock.Controller
	recorder *MockITaskListenerMockRecorder
}

// MockITaskListenerMockRecorder is the mock recorder for MockITaskListener
type MockITaskListenerMockRecorder struct {
	mock *MockITaskListener
}

// NewMockITaskListener creates a new mock instance
func NewMockITaskListener(ctrl *gomock.Controller) *MockITaskListener {
	mock := &MockITaskListener{ctrl: ctrl}
	mock.recorder = &MockITaskListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITaskListener) EXPECT() *MockITaskListenerMockRecorder {
	return m.recorder
}

// OnTask mocks base method
func (m *MockITaskListener) OnTask(arg0 *common.CTask) {
	m.ctrl.Call(m, "OnTask", arg0)
}

// OnTask indicates an expected call of OnTask
func (mr *MockITaskListenerMockRecorder) OnTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTask", reflect.TypeOf((*MockITaskListener)(nil).OnTask), arg0)
}

// MockITaskProvider is a mock of ITaskProvider interface
type MockITaskProvider struct {
	ctrl     *gomock.Controller
	recorder *MockITaskProviderMockRecorder
}

// MockITaskProviderMockRecorder is the mock recorder for MockITaskProvider
type MockITaskProviderMockRecorder struct {
	mock *MockITaskProvider
}

// NewMockITaskProvider creates a new mock instance
func NewMockITaskProvider(ctrl *gomock.Controller) *MockITaskProvider {
	mock := &MockITaskProvider{ctrl: ctrl}
	mock.recorder = &MockITaskProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITaskProvider) EXPECT() *MockITaskProviderMockRecorder {
	return m.recorder
}

// AddTaskListener mocks base method
func (m *MockITaskProvider) AddTaskListener(arg0 common.ITaskListener) {
	m.ctrl.Call(m, "AddTaskListener", arg0)
}

// AddTaskListener indicates an expected call of AddTaskListener
func (mr *MockITaskProviderMockRecorder) AddTaskListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskListener", reflect.TypeOf((*MockITaskProvider)(nil).AddTaskListener), arg0)
}
